unit <- namespace+ ;

namespace <- identifier ws? scope ;

scope <- '{' ws? definitions '}' ;

definitions <- ( ( pattern_def / equation_def / function_def ) ws? )+ ;

pattern_def <- pattern_id '(' ws? identifiers ')' ws? pattern_body ;

equation_def <- '#' identifier '(' ws? identifiers ')' ws? equation_body ;

function_def <- identifier lambda_def ;

lambda_def <- '(' parameters ')' ws? lambda_body ;

lambda_body <- '{' ws? expressions '}' ;

equation_body <- '{' ws? math_expr ( ws? ';' ws? math_expr )* ws? ( ';' ws? )? '}' ;

math_expr <- '(' math_expr ')' / math_expr math_op math_expr / identifier / number ;

expressions <- expression ( ws? ';' ws? expression)* ws? ( ';' ws? )? ;

expression <- non_recursive_expression maybe_binary / '(' expression ')' ;

non_recursive_expression <- literal / match / unary / switch / application / lambda_def / list / dict / pipe ;

maybe_binary <- ws? binary_op ws? expression / '' ;

match <- pattern ws? '=' ws? expression ;

unary <- unary_op ws? expression ;

switch <- '?' ws? expression ws? clauses ;

application <- lambda_def ws? arglist / identifier ws? arglist ;

list <- '[' expression_list ']' / '[' ws? ']' ;

dict <- '#{' pairs '}' / '#{' ws? '}' ;

pipe <- pipe_elem ws? '|' ws? pipe_elem ( ws? '|' ws? pipe_elem )* ;

pipe_elem <- lambda_def ws? pipe_arglist / identifier ws? pipe_arglist ;

pipe_arglist <- '(' ws? pipe_expression_list ws? ')' / '(' ws? ')' ;

pipe_expression_list <- atexpr ( ws? ',' ws? atexpr )* ;

arglist <- '(' ws? expression_list ws? ')' / '(' ws? ')' ;

expression_list <- expression ( ws? ',' ws? expression )* ws? ;

clauses <- clause (ws? clause)* ;

clause <- pattern ws? ':' ws? scope ;

identifiers <- ( identifier ( ws? ',' ws? identifier )* ws? )* ;

parameters <- ( ws? parameter ws? ( ',' ws? parameter ws? )* ) / ws? ;

parameter <- identifier '::' class / identifier / pattern ;

pairs <- pair ( ws? ',' ws? pair )* ;

pair <- expression ws? ':' ws? expression ;

pattern <- pattern_appl / pattern_body ;

pattern_appl <- pattern_id '(' ws? pattern_args ')' / pattern_id '(' ws? ')' ;

pattern_id <- '!' identifier ;

pattern_args <- pattern_arg ws? ( ',' ws? pattern_arg ws? )* ;

pattern_arg <- expression / pattern ;

pattern_body <- pattern_item / pattern_list / pattern_dict ;

pattern_list <- '[' ws? pattern_item ( ws? ',' ws? pattern_item )* ws? ']' / '[' ws? ']' ;

pattern_dict <- '#{' ws? pattern_pair ( ws? ',' ws? pattern_pair )* ws? '}' / '#{' ws? '}' ;

pattern_pair <- pattern_item ws? ':' ws? pattern_item ;

pattern_item <- '_' / literal / identifier / pattern ;

literal <- boolean / null / number / stamp / delta / bits / string ;

stamp <- year '-' month '-' day 'T' hour ':' minute ':' second frac? tz ;

delta <- number time_unit ;

number <- sign? int frac? ( 'E' sign? int )? ;

frac <- '.' [0-9]+ ;

bits <- '0x' hexdigit+ bits_trailer ;

string <- '"' ( '\\"' / ( !'"' . ) )* '"' ;

boolean <- 'true' / 'false' ;

null <- 'null' ;

identifier <- [a-z] [a-zA-Z0-9_]* ;

class <- [A-Z] [a-zA-Z0-9_]* ;

ws <- [\t\n\r\s]+ ;

sign <- '+' / '-' ;

year <- [0-9] [0-9] [0-9] [0-9] ;

int <- [0-9] / ( [1-9] [0-9]+ ) ;

month <- ( '0' [1-9] ) / ( '1' [0-2] ) ;

day <- ( '0' [1-9] ) / ( [12] [0-9] ) / ( '3' [0-1] ) ;

hour <- ( [01] [0-9] ) / ( '2' [0-4] ) ;

minute <- [0-5] [0-9] ;

second <- ( [0-5] [0-9] ) / '60' ;

time_unit <- 'Y' / 'D' / 'h' / 'm' / 's' / 'ms' / 'us' / 'ns' / 'ps' ;

tz <- 'Z' / ( sign hour ':' minute ) ;

math_op <- '+' / '-' / '*' / '/' / '^' ;

hexdigit <- [0-9] / [a-f] ;

bits_trailer <- ':' [1-3] ;

atexpr <- expression / '@' ;

unary_op <- '!' ;

binary_op <- '<<' / '=<' / '==' / '!=' ;
