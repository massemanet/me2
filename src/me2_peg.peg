unit <- namespace+
`me2_parse:unit(Node)`;

namespace <- identifier ws? scope
`me2_parse:namespace(Node)`;

scope <- '{' ws? definitions '}'
`me2_parse:scope(Node)`;

definitions <- ( ( pattern_def / equation_def / function_def ) ws? )+
`me2_parse:definitions(Node)`;

pattern_def <- pattern_id '(' ws? identifiers ')' ws? pattern_body
`me2_parse:pattern_def(Node)`;

equation_def <- '#' identifier '(' ws? identifiers ')' ws? equation_body
`me2_parse:equation_def(Node)`;

function_def <- identifier lambda_def
`me2_parse:function_def(Node)`;

lambda_def <- '(' parameters ')' ws? lambda_body
`me2_parse:lambda_def(Node)`;

lambda_body <- '{' ws? expressions '}'
`me2_parse:lambda_body(Node)`;

equation_body <- '{' ws? math_expr ( ws? ';' ws? math_expr )* ws? ( ';' ws? )? '}'
`me2_parse:equation_body(Node)`;

math_expr <- '(' math_expr ')' / math_expr math_op math_expr / identifier / number
`me2_parse:math_expr(Node)`;

expressions <- expression ( ws? ';' ws? expression)* ws? ( ';' ws? )?
`me2_parse:expressions(Node)`;

expression <- non_recursive_expression maybe_binary / '(' expression ')'
`me2_parse:expression(Node)`;

non_recursive_expression <- literal / match / unary / switch / application / lambda_def / list / dict / pipe
~;

maybe_binary <- ws? binary_op ws? expression / ''
`me2_parse:binary(Node)`;

match <- pattern ws? '=' ws? expression
`me2_parse:match(Node)`;

unary <- unary_op ws? expression
`me2_parse:unary(Node)`;

switch <- '?' ws? expression ws? clauses
`me2_parse:switch(Node)`;

application <- lambda_def ws? arglist / identifier ws? arglist
`me2_parse:application(Node)`;

list <- '[' expression_list ']' / '[' ws? ']'
`me2_parse:list(Node)`;

dict <- '#{' pairs '}' / '#{' ws? '}'
`me2_parse:dict(Node)`;

pipe <- pipe_elem ws? '|' ws? pipe_elem ( ws? '|' ws? pipe_elem )*
`me2_parse:pipe(Node)`;

pipe_elem <- lambda_def ws? pipe_arglist / identifier ws? pipe_arglist
`me2_parse:pipe_elem(Node)`;

pipe_arglist <- '(' ws? pipe_expression_list ws? ')' / '(' ws? ')'
`me2_parse:pipe_arglist(Node)`;

pipe_expression_list <- atexpr ( ws? ',' ws? atexpr )*
`me2_parse:pipe_expression_list(Node)`;

arglist <- '(' ws? expression_list ws? ')' / '(' ws? ')'
`me2_parse:arglist(Node)`;

expression_list <- expression ( ws? ',' ws? expression )* ws?
`me2_parse:expression_list(Node)`;

clauses <- clause (ws? clause)*
`me2_parse:clauses(Node)`;

clause <- pattern ws? ':' ws? scope
`me2_parse:clause(Node)`;

identifiers <- ( identifier ( ws? ',' ws? identifier )* ws? )*
`me2_parse:identifiers(Node)`;

parameters <- ( ws? parameter ws? ( ',' ws? parameter ws? )* ) / ws?
`me2_parse:parameters(Node)`;

parameter <- identifier '::' class / identifier / pattern
`me2_parse:parameter(Node)`;

pairs <- pair ( ws? ',' ws? pair )*
`me2_parse:pairs(Node)`;

pair <- expression ws? ':' ws? expression
`me2_parse:pair(Node)`;

pattern <- pattern_appl / pattern_body
`me2_parse:pattern(Node)`;

pattern_appl <- pattern_id '(' ws? pattern_args ')' / pattern_id '(' ws? ')'
`me2_parse:pattern_appl(Node)`;

pattern_id <- '!' identifier
`me2_parse:pattern_id(Node)`;

pattern_args <- pattern_arg ws? ( ',' ws? pattern_arg ws? )*
`me2_parse:pattern_args(Node)`;

pattern_arg <- expression / pattern
`me2_parse:pattern_arg(Node)`;

pattern_body <- pattern_item / pattern_list / pattern_dict
`me2_parse:pattern_body(Node)`;

pattern_list <- '[' ws? pattern_item ( ws? ',' ws? pattern_item )* ws? ']' / '[' ws? ']'
`me2_parse:pattern_list(Node)`;

pattern_dict <- '#{' ws? pattern_pair ( ws? ',' ws? pattern_pair )* ws? '}' / '#{' ws? '}'
`me2_parse:pattern_dict(Node)`;

pattern_pair <- pattern_item ws? ':' ws? pattern_item
`me2_parse:pattern_pair(Node)`;

pattern_item <- '_' / literal / identifier / pattern
`me2_parse:pattern_item(Node)`;

literal <- boolean / null / number / stamp / delta / bits / string
`me2_parse:literal(Node)`;

stamp <- year '-' month '-' day 'T' hour ':' minute ':' second frac? tz
`me2_parse:stamp(Node)`;

delta <- number time_unit
`me2_parse:delta(Node)`;

number <- sign? int frac? ( 'E' sign? int )?
~;

frac <- '.' [0-9]+
~;

bits <- '0x' hexdigit+ bits_trailer
~;

string <- '"' ( '\\"' / ( !'"' . ) )* '"'
~;

boolean <- 'true' / 'false'
~;

null <- 'null'
~;

identifier <- [a-z] [a-zA-Z0-9_]*
~;

class <- [A-Z] [a-zA-Z0-9_]*
~;

ws <- [\t\n\r\s]+
~;

sign <- '+' / '-'
~;

year <- [0-9] [0-9] [0-9] [0-9]
~;

int <- [0-9] / ( [1-9] [0-9]+ )
~;

month <- ( '0' [1-9] ) / ( '1' [0-2] )
~;

day <- ( '0' [1-9] ) / ( [12] [0-9] ) / ( '3' [0-1] )
~;

hour <- ( [01] [0-9] ) / ( '2' [0-4] )
~;

minute <- [0-5] [0-9]
~;

second <- ( [0-5] [0-9] ) / '60'
~;

time_unit <- 'Y' / 'D' / 'h' / 'm' / 's' / 'ms' / 'us' / 'ns' / 'ps'
~;

tz <- 'Z' / ( sign hour ':' minute )
~;

math_op <- '+' / '-' / '*' / '/' / '^'
~;

hexdigit <- [0-9] / [a-f]
~;

bits_trailer <- ':' [1-3]
~;

atexpr <- expression / '@'
~;

unary_op <- '!'
~;

binary_op <- '<<' / '=<' / '==' / '!='
~;
